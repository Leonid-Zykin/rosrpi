#!/bin/bash

xhost +local:docker || true

ROOT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

docker run -ti --rm \                     # Запускаем контейнер в интерактивном режиме (-ti), удаляем его после выхода (--rm)
    --device /dev/video0 \                 # Пробрасываем видеоустройство (камера)
    --device /dev/vchiq:/dev/vchiq \        # Пробрасываем VCHIQ (доступ к GPU и камере)
    --env LD_LIBRARY_PATH=/opt/vc/lib \     # Добавляем путь к библиотекам видеочипа в переменные окружения
    --device-cgroup-rule='c 81:* rmw' \     # Даем контейнеру доступ к устройствам камеры (cgroup правило)
    -v /opt/vc:/opt/vc \                    # Пробрасываем директорию с библиотеками видеочипа в контейнер
    -e DISPLAY \                             # Передаем переменную окружения для X-сервера (графический интерфейс)
    -e QT_X11_NO_MITSHM=1 \                  # Отключаем MIT-SHM (ускорение X11) для работы GUI
    -v "/tmp/.X11-unix:/tmp/.X11-unix:rw" \  # Пробрасываем сокеты X11 для отображения графики в контейнере
    -e XAUTHORITY \                          # Передаем XAUTHORITY (аутентификация для X-сессии)
    -v /dev:/dev \                           # Пробрасываем все устройства из /dev внутрь контейнера
    -v "$ROOT_DIR/workspace:/workspace" \    # Монтируем директорию с рабочим пространством внутрь контейнера
    --net=host \                             # Используем сеть хоста (прямой доступ без NAT)
    --ipc=host \                             # Разделяем IPC-пространство с хостом (для общения между процессами)
    --privileged \                           # Даем контейнеру повышенные привилегии (полный доступ к оборудованию)
    --name ros_pc \                          # Указываем имя контейнера
    ilya9kkk/ros_arm:latest \                # Указываем образ, который будем запускать
    bash -c "sleep 5 && /workspace/rpi_depend_KOSTYL.bash && exec bash"  # Ждем 5 секунд, запускаем скрипт и оставляем shell


