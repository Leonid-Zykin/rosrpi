# Используем базовый образ Ubuntu 20.04 для архитектуры ARM64
FROM arm64v8/ubuntu:focal
ENV DEBIAN_FRONTEND=noninteractive

# Устанавливаем необходимые системные зависимости
RUN apt-get update && apt-get upgrade -y 

RUN apt-get install -y tzdata && \
    ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata

# Теперь можно устанавливать остальные пакеты
RUN apt-get install -y build-essential  
RUN apt-get install -y cmake  
RUN apt-get install -y git  
RUN apt-get install -y curl  
RUN apt-get install -y wget  
RUN apt-get install -y unzip

RUN apt-get install -y \
    libopencv-dev \
    python3-pip \
    python3-dev \
    python3-opencv \
    libatlas-base-dev \
    libopenblas-dev \
    liblapack-dev \
    libblas-dev \
    libeigen3-dev

RUN apt-get install -y \
    libprotobuf-dev \
    protobuf-compiler \
    libgoogle-glog-dev \
    libgflags-dev \
    liblmdb-dev \
    libsnappy-dev

RUN apt-get install -y \
    libopencv-core-dev \
    libopencv-highgui-dev \
    libopencv-imgproc-dev \
    libopencv-video-dev \
    libopencv-objdetect-dev \
    libopencv-contrib-dev \
    libopencv-features2d-dev \
    libopencv-calib3d-dev \
    libopencv-stitching-dev \
    libopencv-superres-dev \
    libopencv-viz-dev

    RUN apt-get update && apt-get install -y \
    libopencv-ml-dev \
    libopencv-photo-dev \
    libopencv-shape-dev \
    libopencv-videoio-dev \
    libopencv-videostab-dev \
    libopencv-ts-dev

RUN apt-get install -y \
    autoconf \
    automake \
    libtool

RUN apt-get install -y \
    gstreamer-1.0 \
    gstreamer1.0-dev \
    libgstreamer1.0-0 \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    gstreamer1.0-doc \
    gstreamer1.0-tools \
    gstreamer1.0-x \
    gstreamer1.0-alsa \
    gstreamer1.0-gl \
    gstreamer1.0-gtk3 \
    gstreamer1.0-qt5 \
    gstreamer1.0-pulseaudio

RUN apt-get clean && rm -rf /var/lib/apt/lists/*


# Устанавливаем необходимые Python-библиотеки
RUN pip3 install --upgrade pip && \
    pip3 install \
    torch \
    torchvision \
    torchaudio \
    matplotlib \
    numpy \
    opencv-python \
    scikit-learn \
    ultralytics

# Копируем локальный код в контейнер
# COPY . /app

# Устанавливаем рабочую директорию
# WORKDIR /app

# Команда по умолчанию при запуске контейнера
# CMD ["python3", "your_script.py"]
